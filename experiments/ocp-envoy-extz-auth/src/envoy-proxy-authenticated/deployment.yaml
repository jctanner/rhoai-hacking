# This Secret holds the credentials for oauth2-proxy.
# I have populated it with the Keycloak details you provided.
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-proxy-creds
  namespace: echo-server
type: Opaque
stringData:
  OAUTH2_PROXY_CLIENT_ID: "odh"
  OAUTH2_PROXY_CLIENT_SECRET: "redhat1234!"
  OAUTH2_PROXY_COOKIE_SECRET: "CHANGE_THIS_TO_A_32_BYTE_RANDOM_"
---
# Deployment for the oauth2-proxy service, with corrected flags based on source code.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: echo-server
  labels:
    app: oauth2-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:latest
        args:
        - --provider=oidc
        - --oidc-issuer-url=https://keycloak.tannerjc.net/realms/ocp-byoidc-realm
        - --http-address=0.0.0.0:4180
        - --email-domain=*
        - --upstream=static://200
        - --skip-provider-button
        - --ssl-insecure-skip-verify=true
        - --pass-access-token=true
        - --set-xauthrequest=true
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-creds
              key: OAUTH2_PROXY_CLIENT_ID
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-creds
              key: OAUTH2_PROXY_CLIENT_SECRET
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-creds
              key: OAUTH2_PROXY_COOKIE_SECRET
        ports:
        - containerPort: 4180
          name: http
---
# Service for the oauth2-proxy.
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: echo-server
spec:
  selector:
    app: oauth2-proxy
  ports:
  - name: http
    port: 4180
    targetPort: 4180
---
# ConfigMap for the new Envoy proxy, with corrected header allow-list.
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config-authenticated
  namespace: echo-server
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/oauth2"
                    route:
                      cluster: oauth2_proxy
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        disabled: true
                  - match:
                      prefix: "/"
                    route:
                      cluster: echo_service
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  http_service:
                    server_uri:
                      uri: http://oauth2-proxy.echo-server.svc.cluster.local:4180/oauth2/auth
                      cluster: oauth2_proxy
                      timeout: 0.5s
                    authorization_request:
                      allowed_headers:
                        patterns:
                        - exact: cookie
                        - exact: x-forwarded-host
                        - exact: x-forwarded-proto
                    authorization_response:
                      allowed_upstream_headers:
                        patterns:
                        - exact: x-auth-request-user
                        - exact: x-auth-request-email
                        - exact: x-auth-request-access-token
                      allowed_client_headers:
                        patterns:
                        - exact: set-cookie
                        - exact: location
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: echo_service
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: echo_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: echo-server.echo-server.svc.cluster.local
                    port_value: 80
      - name: oauth2_proxy
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: oauth2_proxy
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: oauth2-proxy.echo-server.svc.cluster.local
                    port_value: 4180
---
# The new authenticated Envoy proxy Deployment.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-proxy-authenticated
  namespace: echo-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy-authenticated
  template:
    metadata:
      labels:
        app: envoy-proxy-authenticated
    spec:
      containers:
      - name: envoy
        image: registry.redhat.io/openshift-service-mesh/proxyv2-rhel9:2.6
        command: ["/usr/local/bin/envoy"]
        args: ["-c", "/etc/envoy/envoy.yaml"]
        ports:
        - containerPort: 10000
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config-authenticated
---
# Service for the new authenticated Envoy proxy.
apiVersion: v1
kind: Service
metadata:
  name: envoy-proxy-authenticated
  namespace: echo-server
spec:
  selector:
    app: envoy-proxy-authenticated
  ports:
    - name: 10000-tcp
      protocol: TCP
      port: 80
      targetPort: 10000
---
# Route for the new authenticated Envoy proxy.
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: echo-proxy-authenticated
  namespace: echo-server
spec:
  host: echo-proxy-authenticated.apps-crc.testing
  to:
    kind: Service
    name: envoy-proxy-authenticated
  port:
    targetPort: 10000-tcp
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
